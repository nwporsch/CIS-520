		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Aidan Javier    <apjavier@ksu.edu>
Caleb Logan     <catiel@ksu.edu>
Nickalas Porsch <nwporsch@ksu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


Used to better understand the steps to solving project 3: http://courses.cs.vt.edu/~cs3204/spring2006/project3milestone.html
Used to understand how to setup dirty pages: https://github.com/rpwilliams/CIS520_Proj3/blob/master/pintos3_recompiled/pintos/src/vm/page.c
Understanding mmap unmap: https://github.com/ChristianJHughes/pintos-project3/tree/master/pintos3/src/vm
Helped with mapping: https://github.com/rida300/520PintosProj3/


			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

When a page calls do_page_in() the page will allocated a new frame and frame lock. If a frame could not be created then
the page is not paged in.
In pageout() the method checks to see if the current frame is NULL and if there is a lock on the frame.
Since pageout() was not implemented it would always return false meaning that the page was not evicted.



---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

	In do_page_in we create a frame by calling frame_alloc_and_lock which allocates a new frame and locks it.
	By locking the frame, it stops two user processes from both creating a frame at the same time.


		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

	In page_out(), we first clear the page from page directory which will prevent race conditions when checking if a page is dirty.
	Then we check to see if the page is dirty and then check other conditions. First check to see if the file in the page is null meaning
	the page is avaiable to swap out because there is no file found. Then check to see if the file is dirty. If it is dirty we then check to see
	if the page can be written to swap and if so we swap it out. Else we write the file to disk. If the page is not dirty, then it is okay to clear the frame.


>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We try to find an existing page and if no page exists, meaning the virtual address is invalid, we need to expand the stack since we have more page addresses than the size of the stack.
We also check to make sure the user's frames are less than the address provides and if so we allocate new pages.



			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No new declarations were created or changed.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

In swap_out() we clear out all page sectors in a page which allows us to swap out the page for a new one.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

In munmap, we call lookup_mapping to find a new map and then call unmap to deallocate each page from their
addresses that is associated with the mapping.



---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Demand pages uses swapping which is not used in mmap which means we do not share code.
But, the methods are similar because mmap takes a mapping and places it at the front of the mapping list
for the current running thread. Meaning the mapping will be used immediately which is similar to how demand paging
brings in a page only when it is needed. 


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

	I'd say it was a little easy, but it was hard to answer some of the design documentation questions because of how little code was actually written.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
	
	Kind of it made us learn more about demand paging.
	
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

	Some of the questions on the design doc could have been worded better, for example C4.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
