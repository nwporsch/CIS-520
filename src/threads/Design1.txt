
CIS 520 - Programming Project #1

                   
---- GROUP ----

Nickalas Porsch <nwporsch@ksu.edu>
Caleb Logan     <catiel@ksu.edu>
Aidan Javier    <apjavier@ksu.edu>


---- PRELIMINARIES ----

Help with Semaphores : https://github.com/angrave/SystemProgramming/wiki/Synchronization%2C-Part-1%3A-Mutex-Locks
Helped with understanding how to setup  sleep linked list: https://github.com/ctboley/pintos-cis520/blob/master/pintosproject1/pintos/src/devices/timer.c
Basics of Semaphores: https://www.tutorialspoint.com/semaphores-in-operating-system
Learning how to Backtrace: http://courses.cs.vt.edu/~cs3204/spring2006/gback/debugging.html
Understanding how the timer works: https://github.com/jhauserw3241/Pintos-520/blob/master/src/devices/timer.c
Using Semaphores with Timer and other bugs in code: https://github.com/Hindol/pintos/blob/master/devices/timer.c
Help with how to do Donations: https://github.com/rpwilliams/CIS520_Proj1
Help with understanding Scheduling: https://github.com/Waqee/Pintos-Project-1



                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct list sleeping_thread_list; 
This list is used to keep track of all threads that are currently asleep. The list is also
ordered by who will wakeup next.

int64_t when_to_wakeup;
Added to struct thread to keep track of when the thread needed to wake up.

struct list_elem sleepelem;
Added to struct thread to keep track where the thread is located when in sleeping_thread_list.

struct semaphore semasleep;
Used to tell the individual thread when to sleep and can be used in timer to wake up the thread.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep initalizes the semasleep semaphore in the thread which is used to place the thread to sleep.
The time for when the thread needs to wakeup is also recorded and the list element sleepelem in the thread
is placed in sleeping_thread_list. The list orders the threads inside it to be from closest to waking up to
farthest using compare_wakeups. Then the timer interupt calls check_sleeping_threads to see which threads
are ready to wake up and will wakeup the necessary threads.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

To mminimize the amount of time spent in the interrupt, sleeping_thread_list is organized by nearest time to wakeup.
Once all necessary threads have been awoken, the interrupt will stop moving through the list and end the interrupt.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

To stop multiple thread calls we use semaphores to keep track of when a thread needs to sleep. We also disable interrupts to 
stop threads from only one thread being added the sleeping_thread_list at a time.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
We disable interrupts when editing the sleeping_thread_list. This also no other threads to access the list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

This design works because of the combination of semaphores and interrupts. The semaphores
allow threads to keep track of when a specific thread is asleep. This is better than using
interrupts all of the time because we will lose interrupts. But, by combining the use of 
interrupts and semaphores, the interrupts control access to sleeping_thread_list and semaphores
control when threads sleep.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
 
 struct list donation_list;

 List of all elements that are donated for this thread.
 
 struct list_elem donation_elem;
 A single element in the donation list. Usually used as the front element.

 
 struct lock* wait_on_lock;
 The lock the current thread is waiting on.


>> B2: Explain the data structure used to track priority donation.

We have a list of all elements that can donate in the current thread.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We order all waiting lists by priority so the front of the list is what wakes up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

It checks to see if the lock has a holder and if not, sets the current thread to that holder. If there is a holder, it will check to see if the holders priority is less than the current and if so 
we will add it to the donor list. Then gives its priority to the lock holder so that thread will finish. 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

We first disable interrupts and then remove all donated threads in the donation_list. Then we restore the priority for the lock to what it was before the donations. We then release the lock on the thread.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

When two threads are trying to access a lock where the lock owner has a lower priority then they both donate at the same time. To stop this you would create interrupts to stop one thread from
donating before the other. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The donation_list is sorted by highest priority to make it easy to see who gets highest priority first. By taking into consideration priorties it makes more important processes run first instead of 
ones that are less important. 
