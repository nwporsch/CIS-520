		           +--------------------------+
		           |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Aidan Javier    <apjavier@ksu.edu>
Caleb Logan     <catiel@ksu.edu>
Nickalas Porsch <nwporsch@ksu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Helped with understanding argument passing: https://github.com/ChristianJHughes/pintos-project2/blob/master/pintos/src/userprog/process.c
Helped with understanding strtok_r: https://www.geeksforgeeks.org/strtok-strtok_r-functions-c-examples/
Helped understand how to do syscall: https://github.com/Waqee/Pintos-Project-2
Helped to understand how to add to stack: https://github.com/jhauserw3241/Pintos-520-Proj2/
Helped with understanding syscall: https://github.com/rida300/520Pinto
Helped with understanding filedescriptors: https://github.com/kinux98/pintos-project-2

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Firstly we copy the entire filename and arguments using palloc to avoid a race condition between the caller and load(). Then we malloc the filename and all parameters, copy it to memory with strlcpy, and tokenize the filename and the parameters using strtoken_r to separate them. Then we create the new thread and execute it with just the file name as the first argument and the entire filename as the last. //Unneeded?

We map a zero page at the top of virtual memory and check to see if the page we actually want is less than PHYS_BASE,
this prevents us from overflowing the stack page. If that passes we tokenize the filename and the parameters in order to separate them with strtok_r and then loop through the tokens and place them in an array in reverse order that is a copy of argv then copy that array back into argv. Now that argv has the arguments in the right order we go through and push argv, argc, and a void* return address.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because we need to make sure we know the size of the buffer.  strtok() can buffer overflow and access memory that it shouldn't have access to.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

By allowing the shell to separate the arguments, it allows the kernel system code to be simpler since it can pass the job off to shell instead of doing it itself.  

Also it adds efficiency because the shell would only be handling one executable and arguments, the system has
to manage all of the running threads, and if a new process needs to be executed that is very large then the entire
system has to slow down in order to prepare the arguments and the stack.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
{
	int exit_error; //the number associated with an error
	int tid_waiting_on; //the id of the thread this thread is waiting for to run
	int fd_count; //the number of filedescriptors
	struct thread *parent; //the thread that this thread is a child of
	struct list children; //list of children
	struct list all_files; //list of files
	struct file *current_file; //the current open file
	struct semaphore child_lock; //the lock for children
	bool success; //whether or not the file was successfully opened
	struct list filede; //list of filedescriptors
};
Holds information that pertains to user threads.

struct child
{
	int tid; //the threads id
	struct list_elem childelem; //the next child in the list
	int exit_error; //the number associated with an error
	bool used; //whether or not the child completed
};
Holds information that pertains to threads that are children of other threads.

struct filedesu
{
	int num; //the file descriptors number
	struct thread * parent; //the parent thread
	struct file * f; //the file that needs to be opened
	struct list_elem elem; //
};
Holds information that pertains to open files.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Whenever a new file is opened a file descriptor is created that is associated with
that file.  All file descriptors are unique within a single process, so when the 
process ends or the file is closed, the file descriptors are removed as well.  

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.



>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

If a full page of data is copied into the kernel then that means the data either lies
entirely in one page or overlaps into another, meaning at least one and at most two inspections
must be made to the page table. If there is only two bytes then the number is the same, at least
once at most twice. As long as there is more than one byte of data, there is a chance not all of 
the data can fit into one full page.
The only possible way you could improve this would be to have a full page of data be the 
entirity memory, which is clearly not a good idea.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Look through the childrens list of the thread that is waiting, after we find the child that we've been waiting on we check to see whether it or current thread is null, if not then we update the thread that we're waiting on to be the child. Then we check if the child has been used, if not we decrement it's semaphore and return the error given by the childs exit error.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Having a file that handles exceptions and errors entirely is a good way to avoid obscuring the code, because
it separates the actual functionality from the problems that come from said functionality. The easiest way 
to ensure that the resources are free is to dump the frame associated with the process before you exit.

We use the files exception.c and exception.h for error handling and disposal of processes. The kill method
takes an interrupt frame and kills the process before dumping its virtual memory and exiting the thread.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?



>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?



>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change the identity mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?



>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?



>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?



>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?



>> Any other comments?

